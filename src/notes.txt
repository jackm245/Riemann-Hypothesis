
## Documented design


everything in table A should be well documente, fully articulated
subtitles are thoroughly reccommended
for errors, dont do syntax errors but some decent logic errors
for completeness of solution, needs to meet all of the requirements of a solution/investigation
for complexity, need sufficient demonstrations and application of Group A stuff.
    These need to be programmed more than well to excellent, excellent coding style characteristics, highly effective solution


testing
dont have to do video but strongly reccommended
dont have to test eveything, but should do the complex stuff
must be thorough
must meet analysis objectives
how to do test plan
    test the objectives from the analysis
    need to test normal, boundry and erroneous(invalid) data

provide links and qr codes to testinh video and to the actual code
add comments that say when objectives are met
set a range od tests for each of the objectives
module testing is where you check a function works
system testing - do you get the right result from the whole program
                    each method has to be tested from beginning to end

no peice of entered data should make the program error out - program should never crash
try and except on whole thing?

should diarise coding with any cool logic errors that are thrown
look at book - iterative testing and other testing
test table will include the test numbers, objective trying to meet, inputs and outputs, pass or fail, comments on how to fix. This is in book


evaluation
how well does the outocome meet all of its requirements
copy in the objectives, then say how you met it and where you met it

how the program could have been improved if revisited
with infinite time, money and will

independent feedback obtained of a useful and realistic nature, evaluated and discussed in a meaningful way
get someone else to use the program and say stuff about it

